call pathogen#infect('~/.vim/bundle')
call pathogen#helptags()

let python_version_2 = 1
let g:NERDTreeDirArrows=0

" Essentials.
filetype on
filetype plugin on
filetype plugin indent on
syntax on
set hidden
set ruler
set vb
set wildmenu
set wildmode=longest:full
if exists("&rnu")
    set rnu
    function! ToggleNuMode()
        if(&rnu == 1)
            set number
        else
            set rnu
        endif
    endfunc
    map <C-l> :call ToggleNuMode()<CR>
else
    set number
endif

" Misc.
set autoread
set noswapfile
set cmdheight=1

" Searching
set incsearch
set smartcase
set ignorecase
set wildignore=*.o,*.obj,.git,*.pyc,*.png

" Indenting
" set autoindent
set backspace=indent,eol,start
set expandtab
set tabstop=4 shiftwidth=4 softtabstop=4

" Wrapping
set textwidth=80
set nowrap
if exists("&colorcolumn")
    let &colorcolumn=join(range(81,999),",")
else
    :autocmd BufWinEnter * call matchadd('ErrorMsg', '\%>'.&l:textwidth.'v.\+', -1)
endif
highlight ColorColumn ctermbg=235 guibg=#2c2d27

" Trim whitespace before save
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    :silent! %s/\s\+$//e
    :silent! %s#\($\n\s*\)\+\%$##
    call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Filetype settings
au FileType python     set tw=79
au FileType javascript set tabstop=2 shiftwidth=2 softtabstop=2
au FileType html       set tabstop=2 shiftwidth=2 softtabstop=2
au FileType htmldjango set tabstop=2 shiftwidth=2 softtabstop=2
au FileType html       set tw=0
au FileType htmldjango set tw=0
au FileType git        set tw=72
au FileType gitcommit  set tw=72

" Cabbrs
cabbr <expr> %% escape(expand('%:p:h'), ' ')

" Maps
nmap <leader>T :NERDTreeToggle<CR>
nmap <leader>v :e $MYVIMRC<CR>
nmap <leader>g :e $MYGVIMRC<CR>
nmap <leader>s :lv /^\(get\\|post\\|put\\|del\)/ %<CR>
nmap <leader>n :lne<CR>
nmap <leader>p :lprev<CR>
nmap <leader>a :e ~/.bash_profile<CR>
nmap <leader>w :%s/ \\+$//g<CR>
nmap <leader>h :set invhlsearch<CR>
nnoremap <leader>. <c-^>


imap <c-l> {<CR>}<ESC>O
imap <c-s> <ESC>
nmap <leader>c <Plug>Kwbd

" Comment formatting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Last and next jump should center too.
nnoremap <C-o> <C-o>zz
nnoremap <C-i> <C-i>zz

" Indent text object
onoremap <silent>ai :<C-U>cal <SID>IndTxtObj(0)<CR>
onoremap <silent>ii :<C-U>cal <SID>IndTxtObj(1)<CR>
vnoremap <silent>ai :<C-U>cal <SID>IndTxtObj(0)<CR><Esc>gv
vnoremap <silent>ii :<C-U>cal <SID>IndTxtObj(1)<CR><Esc>gv


function! s:IndTxtObj(inner)
  let curline = line(".")
  let lastline = line("$")
  let i = indent(line(".")) - &shiftwidth * (v:count1 - 1)
  let i = i < 0 ? 0 : i
  if getline(".") !~ "^\\s*$"
    let p = line(".") - 1
    let nextblank = getline(p) =~ "^\\s*$"
    while p > 0 && ((i == 0 && !nextblank) || (i > 0 && ((indent(p) >= i && !(nextblank && a:inner)) || (nextblank && !a:inner))))
      -
      let p = line(".") - 1
      let nextblank = getline(p) =~ "^\\s*$"
    endwhile
    normal! 0V
    call cursor(curline, 0)
    let p = line(".") + 1
    let nextblank = getline(p) =~ "^\\s*$"
    while p <= lastline && ((i == 0 && !nextblank) || (i > 0 && ((indent(p) >= i && !(nextblank && a:inner)) || (nextblank && !a:inner))))
      +
      let p = line(".") + 1
      let nextblank = getline(p) =~ "^\\s*$"
    endwhile
    normal! $
  endif
endfunction


" Function to activate a virtualenv in the embedded interpreter for
" omnicomplete and other things like that.
function! LoadVirtualEnv(path)
    let activate_this = a:path . '/bin/activate_this.py'
    if getftype(a:path) == "dir" && filereadable(activate_this)
        python << EOF
import vim
activate_this = vim.eval('l:activate_this')
execfile(activate_this, dict(__file__=activate_this))
EOF
    endif
endfunction

" Load up a 'stable' virtualenv if one exists in ~/.virtualenv
let defaultvirtualenv = $HOME . "/.virtualenvs/stable"

" Only attempt to load this virtualenv if the defaultvirtualenv
" actually exists, and we aren't running with a virtualenv active.
if has("python")
    if empty($VIRTUAL_ENV) && getftype(defaultvirtualenv) == "dir"
        call LoadVirtualEnv(defaultvirtualenv)
    endif
endif

" Remap some stuff
inoremap ยฃ #
inoremap ยง :
map <C-n> :NERDTreeToggle<CR>
map <C-t> :TagbarToggle<CR>
